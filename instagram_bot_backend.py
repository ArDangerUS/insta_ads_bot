#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Instagram Bot Management System - –ö–†–û–°–°–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–´–ô Backend
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Windows, Linux, VPS
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ fcntl
"""

import asyncio
import json
import threading
import time
import uuid
import platform
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional
import logging
import sqlite3

from flask import Flask, render_template, request, jsonify, send_from_directory
from flask_socketio import SocketIO, emit
from werkzeug.serving import make_server
import queue

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ launcher
from launcher import (
    FixedInstagramBot, BotConfig, UserFilter, Gender,
    InteractionType, DatabaseManager, CrossPlatformLockManager
)

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–∫—Å–∏
try:
    from launcher import ProxyConfig, ProxyManager, test_proxy_api

    PROXY_SUPPORT = True
except ImportError:
    PROXY_SUPPORT = False
    print("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ launcher.py")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['SECRET_KEY'] = 'instagram_bot_secret_key_2025'
socketio = SocketIO(app, cors_allowed_origins="*")


class CrossPlatformBotManager:
    """–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""

    def __init__(self):
        self.bots: Dict[str, FixedInstagramBot] = {}
        self.bot_threads: Dict[str, threading.Thread] = {}
        self.bot_configs: Dict[str, BotConfig] = {}
        self.session_manager = CrossPlatformLockManager()
        self.db = DatabaseManager("bot_management.db")

        self.init_management_db()
        self.load_configs_from_db()

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.session_manager.cleanup_stale_locks()

        logger.info(f"üñ•Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {platform.system()}")

    def init_management_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        with sqlite3.connect("bot_management.db") as conn:
            cursor = conn.cursor()

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS bot_configurations (
                    id TEXT PRIMARY KEY,
                    config_json TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    active BOOLEAN DEFAULT TRUE
                )
            """)

            cursor.execute("""
                CREATE TABLE IF NOT EXISTS bot_status (
                    bot_id TEXT PRIMARY KEY,
                    status TEXT NOT NULL,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    error_message TEXT,
                    session_locked BOOLEAN DEFAULT FALSE,
                    platform TEXT,
                    proxy_host TEXT,
                    proxy_port INTEGER,
                    proxy_type TEXT,
                    FOREIGN KEY (bot_id) REFERENCES bot_configurations (id)
                )
            """)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            try:
                cursor.execute("ALTER TABLE bot_status ADD COLUMN proxy_host TEXT")
                cursor.execute("ALTER TABLE bot_status ADD COLUMN proxy_port INTEGER")
                cursor.execute("ALTER TABLE bot_status ADD COLUMN proxy_type TEXT")
            except sqlite3.OperationalError:
                # –°—Ç–æ–ª–±—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                pass

            conn.commit()

    def save_config_to_db(self, config: BotConfig):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        config_dict = {
            'bot_id': config.bot_id,
            'username': config.username,
            'password': config.password,
            'target_accounts': config.target_accounts,
            'message_template': config.message_template,
            'main_account': config.main_account,
            'active': config.active,
            'max_likes_per_hour': config.max_likes_per_hour,
            'max_follows_per_hour': config.max_follows_per_hour,
            'max_messages_per_hour': config.max_messages_per_hour,
            'min_delay': config.min_delay,
            'max_delay': config.max_delay,
            'posts_to_like': config.posts_to_like,
            'posts_to_analyze': config.posts_to_analyze,
            'message_variants': config.message_variants,
            'personalized_messages': config.personalized_messages,
            'interaction_types': [t.value for t in config.interaction_types],
            'proxy': config.proxy.to_dict() if hasattr(config, 'proxy') and config.proxy else None,
            'filters': {
                'min_followers': config.filters.min_followers,
                'max_followers': config.filters.max_followers,
                'min_following': config.filters.min_following,
                'max_following': config.filters.max_following,
                'min_posts': config.filters.min_posts,
                'has_profile_pic': config.filters.has_profile_pic,
                'private_account': config.filters.private_account,
                'countries': config.filters.countries,
                'languages': config.filters.languages,
                'gender': config.filters.gender.value,
                'engagement_rate_min': config.filters.engagement_rate_min,
                'engagement_rate_max': config.filters.engagement_rate_max,
                'exclude_business_accounts': config.filters.exclude_business_accounts,
                'exclude_verified_accounts': config.filters.exclude_verified_accounts,
                'required_keywords_in_bio': config.filters.required_keywords_in_bio,
                'excluded_keywords_in_bio': config.filters.excluded_keywords_in_bio
            }
        }

        with sqlite3.connect("bot_management.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO bot_configurations (id, config_json, updated_at)
                VALUES (?, ?, ?)
            """, (config.bot_id, json.dumps(config_dict), datetime.now()))
            conn.commit()

    def load_configs_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ –ë–î —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        with sqlite3.connect("bot_management.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id, config_json FROM bot_configurations WHERE active = TRUE")

            for bot_id, config_json in cursor.fetchall():
                try:
                    config_dict = json.loads(config_json)
                    config = self._dict_to_config(config_dict)
                    self.bot_configs[bot_id] = config
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {bot_id}: {e}")

    def _dict_to_config(self, config_dict: dict) -> BotConfig:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ BotConfig —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
        filters_dict = config_dict['filters']
        filters = UserFilter(
            min_followers=filters_dict['min_followers'],
            max_followers=filters_dict['max_followers'],
            min_following=filters_dict['min_following'],
            max_following=filters_dict['max_following'],
            min_posts=filters_dict['min_posts'],
            has_profile_pic=filters_dict['has_profile_pic'],
            private_account=filters_dict['private_account'],
            countries=filters_dict['countries'],
            languages=filters_dict['languages'],
            gender=Gender(filters_dict['gender']),
            engagement_rate_min=filters_dict['engagement_rate_min'],
            engagement_rate_max=filters_dict['engagement_rate_max'],
            exclude_business_accounts=filters_dict['exclude_business_accounts'],
            exclude_verified_accounts=filters_dict['exclude_verified_accounts'],
            required_keywords_in_bio=filters_dict['required_keywords_in_bio'],
            excluded_keywords_in_bio=filters_dict['excluded_keywords_in_bio']
        )

        interaction_types = [InteractionType(t) for t in config_dict['interaction_types']]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy = None
        if PROXY_SUPPORT and config_dict.get('proxy'):
            proxy_data = config_dict['proxy']
            proxy = ProxyConfig(
                host=proxy_data['host'],
                port=proxy_data['port'],
                username=proxy_data.get('username'),
                password=proxy_data.get('password'),
                type=proxy_data['type']
            )

        return BotConfig(
            bot_id=config_dict['bot_id'],
            username=config_dict['username'],
            password=config_dict['password'],
            target_accounts=config_dict['target_accounts'],
            filters=filters,
            message_template=config_dict['message_template'],
            main_account=config_dict['main_account'],
            active=config_dict['active'],
            proxy=proxy,
            max_likes_per_hour=config_dict['max_likes_per_hour'],
            max_follows_per_hour=config_dict['max_follows_per_hour'],
            max_messages_per_hour=config_dict['max_messages_per_hour'],
            min_delay=config_dict['min_delay'],
            max_delay=config_dict['max_delay'],
            posts_to_like=config_dict['posts_to_like'],
            posts_to_analyze=config_dict['posts_to_analyze'],
            message_variants=config_dict['message_variants'],
            personalized_messages=config_dict['personalized_messages'],
            interaction_types=interaction_types
        )

    def add_bot(self, config: BotConfig) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            active_sessions = self.session_manager.get_active_sessions()
            if config.username in active_sessions:
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {config.username} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥–∞—Ö
            for existing_config in self.bot_configs.values():
                if existing_config.username == config.username:
                    logger.error(f"‚ùå –ë–æ—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {config.username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False

            self.bot_configs[config.bot_id] = config
            self.save_config_to_db(config)

            proxy_info = f" —Å –ø—Ä–æ–∫—Å–∏ {config.proxy.host}:{config.proxy.port}" if config.proxy else " –±–µ–∑ –ø—Ä–æ–∫—Å–∏"
            logger.info(f"‚úÖ –ë–æ—Ç {config.username} –¥–æ–±–∞–≤–ª–µ–Ω{proxy_info}")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ {config.username}: {e}")
            return False

    def start_bot(self, bot_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
        try:
            if bot_id in self.bot_threads and self.bot_threads[bot_id].is_alive():
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {bot_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False

            config = self.bot_configs.get(bot_id)
            if not config:
                logger.error(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ—Ç–∞ {bot_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if not self.session_manager.acquire_lock(config.username):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è {config.username}")
                self.update_bot_status(bot_id, "error", "–°–µ—Å—Å–∏—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                return False

            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            time.sleep(3)

            proxy_info = f" —Å –ø—Ä–æ–∫—Å–∏ {config.proxy.host}:{config.proxy.port}" if config.proxy else ""
            logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è {config.username}{proxy_info}...")
            bot = FixedInstagramBot(config)
            self.bots[bot_id] = bot

            def run_bot():
                try:
                    logger.info(f"üèÉ –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞ {config.username}")
                    import asyncio
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(bot.start())
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ {bot_id}: {e}")
                    self.update_bot_status(bot_id, "error", str(e))
                finally:
                    # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                    self.session_manager.release_lock(config.username)
                    logger.info(f"üîì –°–µ—Å—Å–∏—è {config.username} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")

            thread = threading.Thread(target=run_bot, daemon=True, name=f"Bot-{config.username}")
            thread.start()
            self.bot_threads[bot_id] = thread

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫—Å–∏
            self.update_bot_status(
                bot_id, "running", None, session_locked=True,
                proxy_host=config.proxy.host if config.proxy else None,
                proxy_port=config.proxy.port if config.proxy else None,
                proxy_type=config.proxy.type if config.proxy else None
            )
            logger.info(f"‚úÖ –ë–æ—Ç {config.username} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")

            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            config = self.bot_configs.get(bot_id)
            if config:
                self.session_manager.release_lock(config.username)

            self.update_bot_status(bot_id, "error", str(e))
            return False

    def stop_bot(self, bot_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            config = self.bot_configs.get(bot_id)

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            if bot_id in self.bots:
                self.bots[bot_id].stop()
                logger.info(f"üõë –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É {bot_id}")
                del self.bots[bot_id]

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
            if bot_id in self.bot_threads:
                thread = self.bot_threads[bot_id]
                if thread.is_alive():
                    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞ {bot_id}...")
                    thread.join(timeout=15)

                del self.bot_threads[bot_id]

            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            if config:
                self.session_manager.release_lock(config.username)
                logger.info(f"üîì –°–µ—Å—Å–∏—è {config.username} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

            self.update_bot_status(bot_id, "stopped", None, session_locked=False)
            logger.info(f"‚úÖ –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def update_bot_status(self, bot_id: str, status: str, error_message: str = None,
                          session_locked: bool = None, proxy_host: str = None,
                          proxy_port: int = None, proxy_type: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ –ø—Ä–æ–∫—Å–∏"""
        with sqlite3.connect("bot_management.db") as conn:
            cursor = conn.cursor()

            if session_locked is not None:
                cursor.execute("""
                    INSERT OR REPLACE INTO bot_status 
                    (bot_id, status, last_activity, error_message, session_locked, platform, proxy_host, proxy_port, proxy_type)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (bot_id, status, datetime.now(), error_message, session_locked,
                      platform.system(), proxy_host, proxy_port, proxy_type))
            else:
                cursor.execute("""
                    INSERT OR REPLACE INTO bot_status 
                    (bot_id, status, last_activity, error_message, platform, proxy_host, proxy_port, proxy_type)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (bot_id, status, datetime.now(), error_message,
                      platform.system(), proxy_host, proxy_port, proxy_type))

            conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        socketio.emit('bot_status_update', {
            'bot_id': bot_id,
            'status': status,
            'error_message': error_message,
            'session_locked': session_locked,
            'platform': platform.system(),
            'proxy': {
                'host': proxy_host,
                'port': proxy_port,
                'type': proxy_type
            } if proxy_host else None,
            'timestamp': datetime.now().isoformat()
        })

    def get_bot_status(self, bot_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–∫—Å–∏"""
        with sqlite3.connect("bot_management.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT status, last_activity, error_message, session_locked, platform, 
                       proxy_host, proxy_port, proxy_type
                FROM bot_status WHERE bot_id = ?
            """, (bot_id,))

            result = cursor.fetchone()
            if result:
                status, last_activity, error_message, session_locked, bot_platform, proxy_host, proxy_port, proxy_type = result
                return {
                    'status': status,
                    'last_activity': last_activity,
                    'error_message': error_message,
                    'session_locked': bool(session_locked),
                    'platform': bot_platform or platform.system(),
                    'proxy': {
                        'host': proxy_host,
                        'port': proxy_port,
                        'type': proxy_type
                    } if proxy_host else None,
                    'is_running': bot_id in self.bot_threads and self.bot_threads[bot_id].is_alive()
                }
            else:
                return {
                    'status': 'not_started',
                    'last_activity': None,
                    'error_message': None,
                    'session_locked': False,
                    'platform': platform.system(),
                    'proxy': None,
                    'is_running': False
                }

    def get_all_bots_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        result = {}
        for bot_id in self.bot_configs:
            result[bot_id] = self.get_bot_status(bot_id)
        return result

    def get_bot_statistics(self, bot_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        if bot_id in self.bots:
            return self.bots[bot_id].get_statistics()
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
            with sqlite3.connect("instagram_bot.db") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT 
                        action_type,
                        COUNT(*) as total,
                        COUNT(CASE WHEN success = 1 THEN 1 END) as success,
                        COUNT(CASE WHEN success = 0 THEN 1 END) as errors
                    FROM bot_activity 
                    WHERE bot_id = ? 
                    GROUP BY action_type
                """, (bot_id,))

                stats = {}
                for row in cursor.fetchall():
                    action, total, success, errors = row
                    stats[action] = {'total': total, 'success': success, 'errors': errors}

                config = self.bot_configs.get(bot_id)
                return {
                    'total_stats': stats,
                    'hourly_stats': {},
                    'is_running': bot_id in self.bot_threads and self.bot_threads[bot_id].is_alive(),
                    'username': config.username if config else 'Unknown',
                    'platform': platform.system(),
                    'proxy': config.proxy.to_dict() if config and config.proxy else None
                }

    def delete_bot(self, bot_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            self.stop_bot(bot_id)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if bot_id in self.bot_configs:
                config = self.bot_configs[bot_id]

                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ—Å—Å–∏—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
                self.session_manager.release_lock(config.username)

                del self.bot_configs[bot_id]

            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≤ –ë–î
            with sqlite3.connect("bot_management.db") as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE bot_configurations SET active = FALSE WHERE id = ?
                """, (bot_id,))
                conn.commit()

            logger.info(f"‚úÖ –ë–æ—Ç {bot_id} —É–¥–∞–ª–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
            return False

    def cleanup_inactive_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            active_sessions = self.session_manager.get_active_sessions()

            for username in active_sessions:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ username
                has_active_bot = False
                for bot_id, config in self.bot_configs.items():
                    if (config.username == username and
                            bot_id in self.bot_threads and
                            self.bot_threads[bot_id].is_alive()):
                        has_active_bot = True
                        break

                if not has_active_bot:
                    logger.info(f"üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏: {username}")
                    self.session_manager.release_lock(username)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π: {e}")

    def get_system_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        active_sessions = self.session_manager.get_active_sessions()

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
        bots_with_proxy = sum(1 for config in self.bot_configs.values() if hasattr(config, 'proxy') and config.proxy)

        return {
            'platform': platform.system(),
            'platform_release': platform.release(),
            'python_version': platform.python_version(),
            'active_sessions': len(active_sessions),
            'total_bots': len(self.bot_configs),
            'bots_with_proxy': bots_with_proxy,
            'proxy_support': PROXY_SUPPORT,
            'running_bots': len([t for t in self.bot_threads.values() if t.is_alive()]),
            'active_usernames': active_sessions,
            'working_directory': os.getcwd()
        }

    def stop_all_bots(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        for bot_id in list(self.bot_configs.keys()):
            self.stop_bot(bot_id)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π
        self.session_manager.cleanup_stale_locks()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ö–†–û–°–°–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–´–ô –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤
bot_manager = CrossPlatformBotManager()


# –ú–∞—Ä—à—Ä—É—Ç—ã Flask
@app.route('/')
def index():
    return render_template('index.html')


@app.route('/api/bots', methods=['GET'])
def get_bots():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    try:
        bots_data = []
        for bot_id, config in bot_manager.bot_configs.items():
            status = bot_manager.get_bot_status(bot_id)
            stats = bot_manager.get_bot_statistics(bot_id)

            bots_data.append({
                'id': bot_id,
                'username': config.username,
                'main_account': config.main_account,
                'target_accounts': config.target_accounts,
                'proxy': config.proxy.to_dict() if hasattr(config, 'proxy') and config.proxy else None,
                'status': status,
                'stats': stats
            })

        return jsonify(bots_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/test-proxy', methods=['POST'])
def test_proxy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    if not PROXY_SUPPORT:
        return jsonify({'success': False, 'error': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}), 500

    try:
        proxy_data = request.json
        result = test_proxy_api(proxy_data)
        return jsonify(result)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/bots', methods=['POST'])
def add_bot():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∫—Å–∏"""
    try:
        data = request.json

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters_data = data.get('filters', {})
        filters = UserFilter(
            min_followers=filters_data.get('min_followers', 100),
            max_followers=filters_data.get('max_followers', 50000),
            min_following=filters_data.get('min_following', 50),
            max_following=filters_data.get('max_following', 5000),
            min_posts=filters_data.get('min_posts', 3),
            has_profile_pic=filters_data.get('has_profile_pic', True),
            private_account=filters_data.get('private_account', False),
            countries=filters_data.get('countries', []),
            languages=filters_data.get('languages', []),
            gender=Gender(filters_data.get('gender', 'any')),
            engagement_rate_min=filters_data.get('engagement_rate_min', 0.01),
            engagement_rate_max=filters_data.get('engagement_rate_max', 0.20),
            exclude_business_accounts=filters_data.get('exclude_business_accounts', False),
            exclude_verified_accounts=filters_data.get('exclude_verified_accounts', False),
            required_keywords_in_bio=filters_data.get('required_keywords_in_bio', []),
            excluded_keywords_in_bio=filters_data.get('excluded_keywords_in_bio', [])
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
        proxy = None
        if PROXY_SUPPORT and data.get('proxy'):
            proxy_data = data['proxy']
            if proxy_data.get('host') and proxy_data.get('port') and proxy_data.get('type'):
                proxy = ProxyConfig(
                    host=proxy_data['host'],
                    port=int(proxy_data['port']),
                    username=proxy_data.get('username'),
                    password=proxy_data.get('password'),
                    type=proxy_data['type']
                )

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = BotConfig(
            bot_id=str(uuid.uuid4()),
            username=data['username'],
            password=data['password'],
            target_accounts=data['target_accounts'],
            filters=filters,
            message_template=data['message_template'],
            main_account=data['main_account'],
            proxy=proxy,
            max_likes_per_hour=data.get('max_likes_per_hour', 8),
            max_follows_per_hour=data.get('max_follows_per_hour', 4),
            max_messages_per_hour=data.get('max_messages_per_hour', 2),
            min_delay=data.get('min_delay', 300),
            max_delay=data.get('max_delay', 600),
            posts_to_like=data.get('posts_to_like', 2),
            posts_to_analyze=data.get('posts_to_analyze', 3),
            message_variants=data.get('message_variants', [data['message_template']]),
            personalized_messages=data.get('personalized_messages', True),
            interaction_types=[InteractionType(t) for t in data.get('interaction_types', ['both'])]
        )

        if bot_manager.add_bot(config):
            return jsonify({'success': True, 'bot_id': config.bot_id})
        else:
            return jsonify({'success': False, 'error': 'Failed to add bot (username already in use)'}), 400

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500


@app.route('/api/bots/<bot_id>/start', methods=['POST'])
def start_bot(bot_id):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if bot_manager.start_bot(bot_id):
        return jsonify({'success': True})
    else:
        return jsonify({'success': False, 'error': 'Failed to start bot (session conflict or error)'}), 500


@app.route('/api/bots/<bot_id>/stop', methods=['POST'])
def stop_bot(bot_id):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if bot_manager.stop_bot(bot_id):
        return jsonify({'success': True})
    else:
        return jsonify({'success': False, 'error': 'Failed to stop bot'}), 500


@app.route('/api/bots/<bot_id>', methods=['DELETE'])
def delete_bot(bot_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞"""
    if bot_manager.delete_bot(bot_id):
        return jsonify({'success': True})
    else:
        return jsonify({'success': False, 'error': 'Failed to delete bot'}), 500


@app.route('/api/bots/<bot_id>/statistics')
def get_bot_statistics(bot_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    try:
        stats = bot_manager.get_bot_statistics(bot_id)
        return jsonify(stats)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/status')
def get_system_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        all_bots = bot_manager.get_all_bots_status()
        total_bots = len(all_bots)
        running_bots = sum(1 for status in all_bots.values() if status['is_running'])
        system_info = bot_manager.get_system_info()

        return jsonify({
            'total_bots': total_bots,
            'running_bots': running_bots,
            'stopped_bots': total_bots - running_bots,
            'bots_with_proxy': system_info['bots_with_proxy'],
            'proxy_support': system_info['proxy_support'],
            'system_uptime': time.time() - start_time,
            'platform': system_info['platform'],
            'platform_release': system_info['platform_release'],
            'python_version': system_info['python_version'],
            'active_sessions': system_info['active_sessions'],
            'active_usernames': system_info['active_usernames']
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return jsonify({'error': str(e)}), 500


# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    emit('connected', {
        'data': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
        'platform': platform.system(),
        'proxy_support': PROXY_SUPPORT,
        'server_time': datetime.now().isoformat()
    })


@socketio.on('request_status_update')
def handle_status_request():
    try:
        status = bot_manager.get_all_bots_status()
        emit('status_update', status)
    except Exception as e:
        emit('error', {'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}'})


@socketio.on('request_system_info')
def handle_system_info_request():
    try:
        system_info = bot_manager.get_system_info()
        emit('system_info', system_info)
    except Exception as e:
        emit('error', {'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}'})


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""

    def cleanup_worker():
        while True:
            try:
                time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                bot_manager.cleanup_inactive_sessions()
                bot_manager.session_manager.cleanup_stale_locks()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")

    cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True, name="SessionCleanup")
    cleanup_thread.start()


# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
Path("templates").mkdir(exist_ok=True)
Path("static").mkdir(exist_ok=True)
Path("sessions").mkdir(exist_ok=True)
Path("sessions/locks").mkdir(exist_ok=True)

start_time = time.time()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –ö–†–û–°–°–ü–õ–ê–¢–§–û–†–ú–ï–ù–ù–û–ô Instagram Bot Management System")
    print("=" * 70)
    print("üîß –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò:")
    print("   ‚úÖ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Å—Å–∏–π (–±–µ–∑ fcntl)")
    print("   ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
    print("   ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Windows –∏ Linux")
    print("   ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ VPS")

    if PROXY_SUPPORT:
        print("   üåê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ HTTP/HTTPS/SOCKS4/SOCKS5 –ø—Ä–æ–∫—Å–∏")
        print("   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    else:
        print("   ‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ –≤ launcher.py)")

    print()
    print(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.release()}")
    print(f"üêç Python: {platform.python_version()}")
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print()
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä")
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞")
    print("üîí –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Å—Å–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    if PROXY_SUPPORT:
        print("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞")

    print()

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
    periodic_cleanup()

    try:
        socketio.run(app, host='0.0.0.0', port=5000, debug=False, allow_unsafe_werkzeug=True)
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("üßπ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        bot_manager.stop_all_bots()

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
        bot_manager.stop_all_bots()